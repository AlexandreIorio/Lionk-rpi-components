@using Lionk.Core.Component
@using Lionk.Core.DataModel
@using Lionk.Core.View
@using MudBlazor
@using Lionk.Core
@namespace Lionk.Rpi.Gpio
@attribute [ViewOfAttribute("Standard I/O gpio on Rpi 4", typeof(StandardIOGpio), typeof(StandardGpioWidget), ViewContext.Configuration)]


@if (Gpio is null)
{
    <MudText Typo="Typo.body1" >No Gpio found</MudText>
}
else
{
    <MudText Typo="Typo.h6" Class="@_icon">@Gpio.InstanceName</MudText>
    @if (_value > 0)
    {
        <MudChip T="string" Color="Color.Success">Active</MudChip>
    }
    else
    {
        <MudChip T="string" Color="Color.Dark">Inactive</MudChip>
    }
}


@code {
    private int _value = 0;

    [Parameter] public StandardIOGpio? Gpio { get; set; }

    private string _icon = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Gpio != null)
        {
            switch (Gpio)
            {
                case InputGpio:
                    _icon = "bi bi-box-arrow-in-down";
                    break;
                case OutputGpio:
                    _icon = "bi bi-box-arrow-up";
                    break;
            }

            Gpio.NewValueAvailable += GpioNewValueAvailable;
        }
    }

    public void GpioNewValueAvailable(object? sender, MeasureEventArgs<int> e)
    {
        if (e is null) return;

        _value = e.Measures.First().Value;
        StateHasChanged();
    }
}
