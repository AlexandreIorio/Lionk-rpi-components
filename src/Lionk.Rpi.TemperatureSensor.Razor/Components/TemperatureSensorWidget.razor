@using Lionk.Core
@using Lionk.TemperatureSensor
@using Lionk.Core.Component
@using Lionk.Core.Component.Dialog
@using MudBlazor
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@namespace Lionk.TemperatureSensor
@attribute [ComponentView("Simple temperature widget", typeof(ITemperatureSensor), typeof(TemperatureSensorWidget), ComponentViewMode.Widget)]

<MudText Typo="Typo.h6" Class="text-center">Temperature Sensor</MudText>
y
@if (Component is null)
{
    <MudText Typo="Typo.body1" Class="text-center">No sensor found</MudText>
}
else
{
    if (Component is ITemperatureSensor sensor)
    {
        <MudText Typo="Typo.h6" Class="text-center">@sensor.InstanceName</MudText>
        <MudText Typo="Typo.body1">@GetTemperature()</MudText>
        <MudText Typo="Typo.body1"> Last read @GetTime()</MudText>
    }
}

@code {

    [Parameter] public ITemperatureSensor? Component { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(Component is not null && Component is ITemperatureSensor sensor)
        {
            sensor.NewValueAvailable += (sender, e) => InvokeAsync(StateHasChanged);
        }
    }

    private string GetTemperature()
    {
        ITemperatureSensor? sensor = (ITemperatureSensor?)Component;
        if (sensor is null) return "No data";

        return sensor.Measures[(int)sensor.TemperatureType].Value.ToString() ?? "No data";
    }

    private string GetTime()
    {
        ITemperatureSensor? sensor = (ITemperatureSensor?)Component;
        if (sensor is null) return "No data";

        return sensor.Measures[(int)sensor.TemperatureType].Time.ToString() ?? "No data";
    }
}
