@using Lionk.Core
@using Lionk.TemperatureSensor
@using Lionk.Core.Component
@using Lionk.Core.Component.Dialog
@using MudBlazor
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IConfigurableComponent
@implements IDetailableComponent
@inherits Widget
@namespace Lionk.TemperatureSensor

@attribute [NamedElement("Temperature sensor widget", "This widget represent the temperatures measures of a sensor")]

<MudText Typo="Typo.h6" Class="text-center">Temperature Sensor</MudText>

@if (Component is null)
{
    <MudText Typo="Typo.body1" Class="text-center">No sensor found</MudText>
}
else
{
    if (Component is ITemperatureSensor sensor)
    {
        <MudText Typo="Typo.h6" Class="text-center">@sensor.InstanceName</MudText>
        <MudText Typo="Typo.body1">@GetTemperature()</MudText>
        <MudText Typo="Typo.body1"> Last read @GetTime()</MudText>
    }
}

@code {
    public override Type ComponentType => typeof(ITemperatureSensor);
    public Type? ConfigurationView =>
    ComponentView.GetComponentView(
            Component?.GetType(),
            ComponentViewMode.Configuration)?
            .View;
    public Type? DetailView =>
        ComponentView.GetComponentView(
            Component?.GetType(),
            ComponentViewMode.Detail)?
            .View;

    public async Task OpenConfigurationAsync()
    {
        if (Component is null || ConfigurationView is null)
        {
            Snackbar.Add("No configuration view available", Severity.Info);
            return;
        }
        var parameters = new DialogParameters();
        parameters.Add("Component", Component);
        parameters.Add("ConfigType", ConfigurationView);

        var dialog = DialogService.Show<ConfigurationDialog>("Temperature sensor configuration", parameters);
        DialogResult? result = await dialog.Result;

        if (result is not null)
        {
            Component = result.Data as ITemperatureSensor;
            StateHasChanged();
        }
    }

    public async Task OpenDetailAsync()
    {
        if (Component is null || DetailView is null)
        {
            Snackbar.Add("No detail view available", Severity.Info);
            return;
        }
        var parameters = new DialogParameters();
        parameters.Add("Component", Component);
        parameters.Add("ConfigType", DetailView);

        var dialog = DialogService.Show<DetailDialog>("Temperature sensor detail", parameters);
        DialogResult? result = await dialog.Result;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(Component is not null && Component is ITemperatureSensor sensor)
        {
            sensor.NewValueAvailable += (sender, e) => InvokeAsync(StateHasChanged);
        }
    }

    private string GetTemperature()
    {
        ITemperatureSensor? sensor = (ITemperatureSensor?)Component;
        if (sensor is null) return "No data";

        return sensor.Measures[(int)sensor.TemperatureType].Value.ToString() ?? "No data";
    }

    private string GetTime()
    {
        ITemperatureSensor? sensor = (ITemperatureSensor?)Component;
        if (sensor is null) return "No data";

        return sensor.Measures[(int)sensor.TemperatureType].Time.ToString() ?? "No data";
    }
}
